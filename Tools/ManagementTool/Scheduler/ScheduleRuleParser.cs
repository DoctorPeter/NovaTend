// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DOCTORPETERCOMP
// DateTime: 08.04.2016 11:35:15
// UserName: DoctorPeter
// Input file <parser.y - 08.04.2016 11:33:13>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Scheduler
{
public enum Tokens {error=2,EOF=3,TOK_TIME=4,TOK_DATE=5,TOK_DAY=6,
    TOK_COUNT=7,TOK_TIME_PERIOD_CONDITION=8,TOK_DATE_PERIOD_CONDITION=9,TOK_DAYS_PERIOD_CONDITION=10,TOK_COUNT_CONDITION=11,TOK_NOT=12,
    TOK_AND=13,TOK_OR=14,TOK_OPEN_SQUARE_BREAKET=15,TOK_CLOSE_SQUARE_BREAKET=16,TOK_OPEN_ROUND_BREAKET=17,TOK_CLOSE_ROUND_BREAKET=18,
    TOK_MINUS=19,UNARY=20};

public struct ValueType
{
  public string strValue;
  public int intValue;
  public DateTime dateTimeValue;
  public DayOfWeek dayValue;
  public ScheduleCondition node;
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from parser.y - 08.04.2016 11:33:13
	// Root of scedule rule tree
	public ScheduleCondition root;

	// Parser constructor
	public Parser(Scanner scanner) : base(scanner) { }
  // End verbatim content from parser.y - 08.04.2016 11:33:13

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[11];
  private static State[] states = new State[37];
  private static string[] nonTerms = new string[] {
      "condition_statement", "$accept", "condition", };

  static Parser() {
    states[0] = new State(new int[]{8,8,9,14,10,20,11,26,12,32,17,34},new int[]{-1,1,-3,3});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{13,4,14,6,3,-2});
    states[4] = new State(new int[]{8,8,9,14,10,20,11,26,12,32,17,34},new int[]{-3,5});
    states[5] = new State(-8);
    states[6] = new State(new int[]{8,8,9,14,10,20,11,26,12,32,17,34},new int[]{-3,7});
    states[7] = new State(-9);
    states[8] = new State(new int[]{15,9});
    states[9] = new State(new int[]{4,10});
    states[10] = new State(new int[]{19,11});
    states[11] = new State(new int[]{4,12});
    states[12] = new State(new int[]{16,13});
    states[13] = new State(-3);
    states[14] = new State(new int[]{15,15});
    states[15] = new State(new int[]{5,16});
    states[16] = new State(new int[]{19,17});
    states[17] = new State(new int[]{5,18});
    states[18] = new State(new int[]{16,19});
    states[19] = new State(-4);
    states[20] = new State(new int[]{15,21});
    states[21] = new State(new int[]{6,22});
    states[22] = new State(new int[]{19,23});
    states[23] = new State(new int[]{6,24});
    states[24] = new State(new int[]{16,25});
    states[25] = new State(-5);
    states[26] = new State(new int[]{15,27});
    states[27] = new State(new int[]{7,28});
    states[28] = new State(new int[]{19,29});
    states[29] = new State(new int[]{7,30});
    states[30] = new State(new int[]{16,31});
    states[31] = new State(-6);
    states[32] = new State(new int[]{8,8,9,14,10,20,11,26,12,32,17,34},new int[]{-3,33});
    states[33] = new State(-7);
    states[34] = new State(new int[]{8,8,9,14,10,20,11,26,12,32,17,34},new int[]{-3,35});
    states[35] = new State(new int[]{18,36,13,4,14,6});
    states[36] = new State(-10);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{8,15,4,19,4,16});
    rules[4] = new Rule(-3, new int[]{9,15,5,19,5,16});
    rules[5] = new Rule(-3, new int[]{10,15,6,19,6,16});
    rules[6] = new Rule(-3, new int[]{11,15,7,19,7,16});
    rules[7] = new Rule(-3, new int[]{12,-3});
    rules[8] = new Rule(-3, new int[]{-3,13,-3});
    rules[9] = new Rule(-3, new int[]{-3,14,-3});
    rules[10] = new Rule(-3, new int[]{17,-3,18});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // condition_statement -> condition
{root = ValueStack[ValueStack.Depth-1].node;}
        break;
      case 3: // condition -> TOK_TIME_PERIOD_CONDITION, TOK_OPEN_SQUARE_BREAKET, TOK_TIME, 
              //              TOK_MINUS, TOK_TIME, TOK_CLOSE_SQUARE_BREAKET
{CurrentSemanticValue.node = ScheduleCondition.MakeConditionNode(null, null, ScheduleConditionType.TIME_PERIOD_CONDITION, ValueStack[ValueStack.Depth-4].dateTimeValue, ValueStack[ValueStack.Depth-2].dateTimeValue, DayOfWeek.Sunday, DayOfWeek.Sunday, 0, 0);}
        break;
      case 4: // condition -> TOK_DATE_PERIOD_CONDITION, TOK_OPEN_SQUARE_BREAKET, TOK_DATE, 
              //              TOK_MINUS, TOK_DATE, TOK_CLOSE_SQUARE_BREAKET
{CurrentSemanticValue.node = ScheduleCondition.MakeConditionNode(null, null, ScheduleConditionType.DATE_PERIOD_CONDITION, ValueStack[ValueStack.Depth-4].dateTimeValue, ValueStack[ValueStack.Depth-2].dateTimeValue, DayOfWeek.Sunday, DayOfWeek.Sunday, 0, 0);}
        break;
      case 5: // condition -> TOK_DAYS_PERIOD_CONDITION, TOK_OPEN_SQUARE_BREAKET, TOK_DAY, 
              //              TOK_MINUS, TOK_DAY, TOK_CLOSE_SQUARE_BREAKET
{CurrentSemanticValue.node = ScheduleCondition.MakeConditionNode(null, null, ScheduleConditionType.DAYS_PERIOD_CONDITION, DateTime.Now, DateTime.Now, ValueStack[ValueStack.Depth-4].dayValue, ValueStack[ValueStack.Depth-2].dayValue, 0, 0);}
        break;
      case 6: // condition -> TOK_COUNT_CONDITION, TOK_OPEN_SQUARE_BREAKET, TOK_COUNT, TOK_MINUS, 
              //              TOK_COUNT, TOK_CLOSE_SQUARE_BREAKET
{CurrentSemanticValue.node = ScheduleCondition.MakeConditionNode(null, null, ScheduleConditionType.COUNT_CONDITION, DateTime.Now, DateTime.Now, DayOfWeek.Sunday, DayOfWeek.Sunday, ValueStack[ValueStack.Depth-2].intValue, ValueStack[ValueStack.Depth-4].intValue);}
        break;
      case 7: // condition -> TOK_NOT, condition
{CurrentSemanticValue.node = ScheduleCondition.MakeConditionNode(ValueStack[ValueStack.Depth-1].node, null, ScheduleConditionType.NOT_OPERATION, DateTime.Now, DateTime.Now, DayOfWeek.Sunday, DayOfWeek.Sunday, 0, 0);}
        break;
      case 8: // condition -> condition, TOK_AND, condition
{CurrentSemanticValue.node = ScheduleCondition.MakeConditionNode(ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node, ScheduleConditionType.AND_OPERATION, DateTime.Now, DateTime.Now, DayOfWeek.Sunday, DayOfWeek.Sunday, 0, 0);}
        break;
      case 9: // condition -> condition, TOK_OR, condition
{CurrentSemanticValue.node = ScheduleCondition.MakeConditionNode(ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node, ScheduleConditionType.OR_OPERATION, DateTime.Now, DateTime.Now, DayOfWeek.Sunday, DayOfWeek.Sunday, 0, 0);}
        break;
      case 10: // condition -> TOK_OPEN_ROUND_BREAKET, condition, TOK_CLOSE_ROUND_BREAKET
{CurrentSemanticValue = ValueStack[ValueStack.Depth-2];}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
